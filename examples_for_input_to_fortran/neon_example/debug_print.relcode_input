# This is an example input file for running neon with relcode.

###########################################
# Atomic system parameters
###########################################

nuclear_charge_Z         = 10            # For example 10 if neon. Currently we support He,Ne,Ar,Kr,Xe,Rn, that is
                                         # Z=2,10,18,36,54,86
                                         # Support can be extended by modifying code in the relcode_py repo,
                                         # if one wants to run for example closed-shell ions.
                                         # If there is some problem with HF convergence one should double-check the list
                                         # of generated orbitals.

number_of_holes          = 3             # Holes included in ionisation, counting from the outermost orbital and inward.
                                         # If number_of_holes = 3 and we run neon, we would ionise from orbitals
                                         # 2p_(j=3/2), 2p_(j=1/2) and 2s_(j=1/2).

last_kappa               = -4            # Must be at least the same as highest for occupied orbitals.
                                         # When doing one- and two-photon ionisation we allow or restrict how
                                         # much kappa can change after photon interaction. If we want to include something like
                                         # 2p3/2 -> d5/2 -> f7/2, after two photons, this corresponds to
                                         # kappas changing as -2 -> -3 -> -4, so last_kappa would have to be -4.

###########################################
# Run parameters
###########################################
# By default the program will calculate Hartree-Fock description of the ground state without any interaction with light.
# If there is a correct path specified for reading old data for the HF description the program will use that instead
# of computing the ground state (see "File I/O parameters" below).
# There is also the possibility of diagonalising the CIS hamiltonian instead of computing one-photon interaction (RRPAE).
# Computing the interaction with the second photon is only possible after RRPAE (one photon) calculation, at the moment.

run_one_photon      = false                # Compute perturbed wave function after XUV absorption
                                           # Including many-electron effects to RRPAE-level by
                                           # solving system of linear equations.

run_two_photons                = true      # Compute interaction with the second photon (IR)

run_forward_only               = true      # If we only want to include the "forward" RRPAE diagrams.
                                           # When run_forward_only is true and we are diagonalising this is equivalent to
                                           # configuration interaction singles (CIS).

use_projected_potential        = true      # Whether or not to use a projected potential.

projected_potential_hole_index = 1         # The index of the hole to use for the projected potential, counting from the outer-most orbital

run_rpa_second_photon          = true      # Add RPAE diagrams for the second photon.

run_diagonalise_first_photon = true       # NB: Diagonalisation happens before photon interaction and _should_
                                           # preserve matrices after diagonalisation.

run_diagonalise_second_photon  = false     # NB: Diagonalisation happens before photon interaction and _should_
                                           # preserve matrices after diagonalisation.

write_diag_eigenvectors        = false     # If eigenvectors from diagonalisation should be written to disk.
                                           # This is done in a human readable way and takes up a lot of space for a big matrix.

write_diag_coefficients        = false     # This writes a file printing out the largest coefficients for each eigenvalue and
                                           # channel. Typicall those coefficients contributing more than 10%

run_breit                      = false     # Add Breit interaction.


###########################################
# File I/O parameters
###########################################
path_to_output_folder         = /home/ljungdahl/relcode_examples/neon_example/debug_print     #
                                              # Where all Fortran data will be saved.
                                              # Data from previous runs will be backed up automatically in
                                              # the same folder. This can be a specified path on the filesystem, or 'default'.
                                              # If default it will be in a subfolder "output/" inside of the directory
                                              # from which the input-generation script is called.
                                              # (usually the same directory as this file).


path_to_previous_output        = 0      #
                                              # If this is a valid path to some previous output data the program
                                              # will use previous results and not re-compute the ground state.
                                              # Note that this relies on relevant simulation parameters
                                              # being the same as for this previous results!
                                              # Can be 0, default, or specified path on the filesystem

path_to_experimental_energies  = 0            #
                                              # Can be 0 or a path to a file containing a list of experimental ground state
                                              # binding energies. If not zero the program will try to replace HF energies
                                              # with experimental values. The file should be a single column with values
                                              # in atomic units ordered in ascending binding energy.

###########################################
# Simulation box parameters
###########################################
bspline_order_k               = 8             # Order for the small component, large will be bspline_order_k-1.

total_number_of_bsplines      = 240           # The same as the number of "physical" knotpoints.

grid_start_point              = 0.0           # Start coordinate of radial grid

grid_end_point                = 100.0         # End coord of radial grid (end of box).

# The grid is divided into three regions that have different knotpoint distributions.
# The first (inner) region has an exponential distribution. It starts at grid_start_point and ends at
# end_point_of_first_region. We also set how many knotpoints there is in each region.
# NB: We must have that the region points sum to the total number of bsplines, in the argon example 240 = 8+159+73
# (input generation will throw an error otherwise).

first_non_zero_point                    = 0.05          # radial coorddinates, atomic units.
                                                        # In this example ~ 0.5/Z a.u., with Z = 10.
                                                        # For heavier atoms we want more knot points closer to
                                                        # zero, in order to resolve higher bound states.
                                                        # If this coordinate is greater than 0.5/Z you will get
                                                        # a warning.

second_point_multiplier        = 3   # The second non-zero point is defined as
                                     # second_non_zero_point = second_point_multiplier * first_non_zero_point
                                     # This is usually set to 3. The points after the first two are exponentially distributed
                                     # up to the end point of the inner region.

end_point_of_inner_region                      = 0.9                # atomic units

inner_region_number_of_exponential_points      = 9                  #

# Middle region has a linear distribution
mid_region_number_of_linear_points             = 155                #

# The last region is the ECS (exterior complex scaling) region.
ecs_region_starting_point                      = 70.0              # atomic units

ecs_region_number_of_points                    = 76                 # The ECS points will smoothly transition from the linear
                                                                    # distribution to a less dense distribution

ecs_end_imaginary_coordinate                   = 5.0                # How far we go along the imaginary axis.
                                                                    # This controls complex scaling angle. atomic units

###########################################
# Photon parameters
###########################################
# Since we often want to do RABBIT simulations the XUV photon step size is an even fraction of the second photon energy
# (IR, which is constant). We specify start and end points, and the fraction for the step size.
#
# The probram can be tuned to study RABITT, KRAKEN or a custom experimental scheme by setting the photon_energy_generation parameter.
#
# With the RABITT scheme, the program will make sure that the range fits a number of points with the correct step size, which means
# that the actual start and end points after simulation will be slightly different than specified here.

photon_energy_generation                       = 0                 # Can take the values 0, 1 or a filepath:
                                                                   #    - 0: Reproduces RABITT by using two IR photon energies:
                                                                   #         -second_photon_energy (eF1) + second_photon_energy (eF2)
                                                                   #
                                                                   #    - 1: In KRAKEN, one IR energy (eF1) is used, tuned so that the
                                                                   #         final energy is given by total_photon_energy
                                                                   #
                                                                   #    - Filepath: By giving a filepath, a file containing custom photon
                                                                   #                parameters may be specified. The first (non-empty,
                                                                   #                non-commented) line should specify the units as either
                                                                   #                "eV" or "au". Each subsequent line should start with a
                                                                   #                XUV energy, and then list all IR energies that should
                                                                   #                be used:
                                                                   #                "omegaXUV omegaIR1 omegaIR2 omegaIR3 omegaIR4 ..."
                                                                   #                Each line should contain the same number of IR photon
                                                                   #                energies

first_photon_energy_start                      = 44.0               # Specified in eV

first_photon_energy_end                        = 54.0               #

first_photon_step_fraction                     = 16                 # If we want delta_omega = omega_IR/4,
                                                                    # then this should be 4.

second_photon_energy                           = 1.55               # This is given in eV, and is constant over a run.
                                                                    # Typically 1.55 eV for the RABBIT IR probe.

total_photon_energy                            = 60.00              # The final photon energy if the KRAKEN scheme is used, specified in eV
